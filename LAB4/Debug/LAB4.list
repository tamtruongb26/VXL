
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba8  08002ba8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ba8  08002ba8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ba8  08002ba8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000004c  08002bfc  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08002bfc  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009804  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cff  00000000  00000000  00029879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016edf  00000000  00000000  0002ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c436  00000000  00000000  00043927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082513  00000000  00000000  0004fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  000d22c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b6c 	.word	0x08002b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002b6c 	.word	0x08002b6c

0800014c <is_button_pressed>:
//button flag & timer for key press
int button_flag[N0_OF_BUTTONS];
int timerforkeypress[N0_OF_BUTTONS];

//is button press
int is_button_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <is_button_pressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <is_button_pressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <is_button_pressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <is_button_pressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <getKeyInput>:

//get input
void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0

	for (int i = 0; i < N0_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		keyReg2[i] = keyReg1[i];
 800018c:	4a44      	ldr	r2, [pc, #272]	; (80002a0 <getKeyInput+0x120>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4943      	ldr	r1, [pc, #268]	; (80002a4 <getKeyInput+0x124>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg0[i];
 800019c:	4a42      	ldr	r2, [pc, #264]	; (80002a8 <getKeyInput+0x128>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493e      	ldr	r1, [pc, #248]	; (80002a0 <getKeyInput+0x120>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}

	keyReg0[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	483b      	ldr	r0, [pc, #236]	; (80002ac <getKeyInput+0x12c>)
 80001be:	f001 fcc1 	bl	8001b44 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b38      	ldr	r3, [pc, #224]	; (80002a8 <getKeyInput+0x128>)
 80001c8:	601a      	str	r2, [r3, #0]
	keyReg0[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	4837      	ldr	r0, [pc, #220]	; (80002ac <getKeyInput+0x12c>)
 80001d0:	f001 fcb8 	bl	8001b44 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b33      	ldr	r3, [pc, #204]	; (80002a8 <getKeyInput+0x128>)
 80001da:	605a      	str	r2, [r3, #4]
	keyReg0[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4832      	ldr	r0, [pc, #200]	; (80002ac <getKeyInput+0x12c>)
 80001e2:	f001 fcaf 	bl	8001b44 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <getKeyInput+0x128>)
 80001ec:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < N0_OF_BUTTONS; i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e04d      	b.n	8000290 <getKeyInput+0x110>
		if ((keyReg1[i] == keyReg0[i]) && (keyReg2[i] == keyReg1[i])){
 80001f4:	4a2a      	ldr	r2, [pc, #168]	; (80002a0 <getKeyInput+0x120>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492a      	ldr	r1, [pc, #168]	; (80002a8 <getKeyInput+0x128>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d140      	bne.n	800028a <getKeyInput+0x10a>
 8000208:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <getKeyInput+0x124>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4923      	ldr	r1, [pc, #140]	; (80002a0 <getKeyInput+0x120>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d136      	bne.n	800028a <getKeyInput+0x10a>
			if (bufferButton[i] != keyReg0[i]){
 800021c:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <getKeyInput+0x130>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4920      	ldr	r1, [pc, #128]	; (80002a8 <getKeyInput+0x128>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d018      	beq.n	8000262 <getKeyInput+0xe2>
				bufferButton[i] = keyReg0[i];
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <getKeyInput+0x128>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	491d      	ldr	r1, [pc, #116]	; (80002b0 <getKeyInput+0x130>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (bufferButton[i] == PRESSED_STATE){
 8000240:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <getKeyInput+0x130>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d11e      	bne.n	800028a <getKeyInput+0x10a>
					button_flag[i] = 1;
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <getKeyInput+0x134>)
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timerforkeypress[i] = DURATION / TICK;
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <getKeyInput+0x138>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2132      	movs	r1, #50	; 0x32
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000260:	e013      	b.n	800028a <getKeyInput+0x10a>
				}
			} else{
				timerforkeypress[i]--;
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <getKeyInput+0x138>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	1e5a      	subs	r2, r3, #1
 800026c:	4912      	ldr	r1, [pc, #72]	; (80002b8 <getKeyInput+0x138>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timerforkeypress[i] == 0){
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <getKeyInput+0x138>)
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <getKeyInput+0x10a>
					bufferButton[i] = NORMAL_STATE;
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <getKeyInput+0x130>)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2101      	movs	r1, #1
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++){
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2b02      	cmp	r3, #2
 8000294:	ddae      	ble.n	80001f4 <getKeyInput+0x74>
				}
			}
		}
	}
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000018 	.word	0x20000018
 80002a8:	20000000 	.word	0x20000000
 80002ac:	40011000 	.word	0x40011000
 80002b0:	20000024 	.word	0x20000024
 80002b4:	20000078 	.word	0x20000078
 80002b8:	20000084 	.word	0x20000084

080002bc <update_led7seg>:

//led_buffer
int led_buffer[4];

//update 4led7seg
void update_led7seg(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	led_buffer[0] = led1_value / 10;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <update_led7seg+0x70>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <update_led7seg+0x74>)
 80002c6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ca:	1092      	asrs	r2, r2, #2
 80002cc:	17db      	asrs	r3, r3, #31
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <update_led7seg+0x78>)
 80002d2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led1_value % 10;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <update_led7seg+0x70>)
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <update_led7seg+0x74>)
 80002da:	fb83 2301 	smull	r2, r3, r3, r1
 80002de:	109a      	asrs	r2, r3, #2
 80002e0:	17cb      	asrs	r3, r1, #31
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	4613      	mov	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	4413      	add	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	1aca      	subs	r2, r1, r3
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <update_led7seg+0x78>)
 80002f0:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led2_value / 10;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <update_led7seg+0x7c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <update_led7seg+0x74>)
 80002f8:	fb82 1203 	smull	r1, r2, r2, r3
 80002fc:	1092      	asrs	r2, r2, #2
 80002fe:	17db      	asrs	r3, r3, #31
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <update_led7seg+0x78>)
 8000304:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led2_value % 10;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <update_led7seg+0x7c>)
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <update_led7seg+0x74>)
 800030c:	fb83 2301 	smull	r2, r3, r3, r1
 8000310:	109a      	asrs	r2, r3, #2
 8000312:	17cb      	asrs	r3, r1, #31
 8000314:	1ad2      	subs	r2, r2, r3
 8000316:	4613      	mov	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4413      	add	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	1aca      	subs	r2, r1, r3
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <update_led7seg+0x78>)
 8000322:	60da      	str	r2, [r3, #12]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000070 	.word	0x20000070
 8000330:	66666667 	.word	0x66666667
 8000334:	20000090 	.word	0x20000090
 8000338:	20000074 	.word	0x20000074

0800033c <update_led_for_1s>:

void update_led_for_1s(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//timer of realtime for led7seg
	if (timer_flag[2] == 1){
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <update_led_for_1s+0x34>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d110      	bne.n	800036a <update_led_for_1s+0x2e>
		led1_value--;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <update_led_for_1s+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3b01      	subs	r3, #1
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <update_led_for_1s+0x38>)
 8000350:	6013      	str	r3, [r2, #0]
		led2_value--;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <update_led_for_1s+0x3c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a07      	ldr	r2, [pc, #28]	; (8000378 <update_led_for_1s+0x3c>)
 800035a:	6013      	str	r3, [r2, #0]
		update_led7seg();
 800035c:	f7ff ffae 	bl	80002bc <update_led7seg>
		setTimer(2, 1000);
 8000360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000364:	2002      	movs	r0, #2
 8000366:	f000 ff7b 	bl	8001260 <setTimer>
	}
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000418 	.word	0x20000418
 8000374:	20000070 	.word	0x20000070
 8000378:	20000074 	.word	0x20000074

0800037c <led7_segRun>:

//led7seg run
void led7_segRun(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	//led status
	switch (led_status){
 8000380:	4b61      	ldr	r3, [pc, #388]	; (8000508 <led7_segRun+0x18c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b04      	cmp	r3, #4
 8000386:	f200 80b3 	bhi.w	80004f0 <led7_segRun+0x174>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <led7_segRun+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a5 	.word	0x080003a5
 8000394:	080003b9 	.word	0x080003b9
 8000398:	08000407 	.word	0x08000407
 800039c:	08000455 	.word	0x08000455
 80003a0:	080004a3 	.word	0x080004a3
	case LED_INIT:
		update_led7seg();
 80003a4:	f7ff ff8a 	bl	80002bc <update_led7seg>
		led_status = LED0;
 80003a8:	4b57      	ldr	r3, [pc, #348]	; (8000508 <led7_segRun+0x18c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
		setTimer(1, 250);
 80003ae:	21fa      	movs	r1, #250	; 0xfa
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 ff55 	bl	8001260 <setTimer>
		break;
 80003b6:	e0a4      	b.n	8000502 <led7_segRun+0x186>
	case LED0:
		//led0 ON
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	4853      	ldr	r0, [pc, #332]	; (800050c <led7_segRun+0x190>)
 80003be:	f001 fbd8 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	4851      	ldr	r0, [pc, #324]	; (800050c <led7_segRun+0x190>)
 80003c8:	f001 fbd3 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	484e      	ldr	r0, [pc, #312]	; (800050c <led7_segRun+0x190>)
 80003d4:	f001 fbcd 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	484b      	ldr	r0, [pc, #300]	; (800050c <led7_segRun+0x190>)
 80003e0:	f001 fbc7 	bl	8001b72 <HAL_GPIO_WritePin>
		numToLed(led_buffer[0]);
 80003e4:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <led7_segRun+0x194>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fb13 	bl	8000a14 <numToLed>

		//change status
		if (timer_flag[1] == 1){
 80003ee:	4b49      	ldr	r3, [pc, #292]	; (8000514 <led7_segRun+0x198>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d17e      	bne.n	80004f4 <led7_segRun+0x178>
			led_status = LED1;
 80003f6:	4b44      	ldr	r3, [pc, #272]	; (8000508 <led7_segRun+0x18c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	601a      	str	r2, [r3, #0]
			setTimer(1, 250);
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 ff2e 	bl	8001260 <setTimer>
		}
		break;
 8000404:	e076      	b.n	80004f4 <led7_segRun+0x178>
	case LED1:
		//led1 ON
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4840      	ldr	r0, [pc, #256]	; (800050c <led7_segRun+0x190>)
 800040c:	f001 fbb1 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	483d      	ldr	r0, [pc, #244]	; (800050c <led7_segRun+0x190>)
 8000416:	f001 fbac 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000420:	483a      	ldr	r0, [pc, #232]	; (800050c <led7_segRun+0x190>)
 8000422:	f001 fba6 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042c:	4837      	ldr	r0, [pc, #220]	; (800050c <led7_segRun+0x190>)
 800042e:	f001 fba0 	bl	8001b72 <HAL_GPIO_WritePin>
		numToLed(led_buffer[1]);
 8000432:	4b37      	ldr	r3, [pc, #220]	; (8000510 <led7_segRun+0x194>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 faec 	bl	8000a14 <numToLed>

		//change status
		if (timer_flag[1] == 1){
 800043c:	4b35      	ldr	r3, [pc, #212]	; (8000514 <led7_segRun+0x198>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d159      	bne.n	80004f8 <led7_segRun+0x17c>
			led_status = LED2;
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <led7_segRun+0x18c>)
 8000446:	2203      	movs	r2, #3
 8000448:	601a      	str	r2, [r3, #0]
			setTimer(1, 250);
 800044a:	21fa      	movs	r1, #250	; 0xfa
 800044c:	2001      	movs	r0, #1
 800044e:	f000 ff07 	bl	8001260 <setTimer>
		}
		break;
 8000452:	e051      	b.n	80004f8 <led7_segRun+0x17c>
	case LED2:
		//led2 ON
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	482c      	ldr	r0, [pc, #176]	; (800050c <led7_segRun+0x190>)
 800045a:	f001 fb8a 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	482a      	ldr	r0, [pc, #168]	; (800050c <led7_segRun+0x190>)
 8000464:	f001 fb85 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046e:	4827      	ldr	r0, [pc, #156]	; (800050c <led7_segRun+0x190>)
 8000470:	f001 fb7f 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	4824      	ldr	r0, [pc, #144]	; (800050c <led7_segRun+0x190>)
 800047c:	f001 fb79 	bl	8001b72 <HAL_GPIO_WritePin>
		numToLed(led_buffer[2]);
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <led7_segRun+0x194>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fac5 	bl	8000a14 <numToLed>

		//change status
		if (timer_flag[1] == 1){
 800048a:	4b22      	ldr	r3, [pc, #136]	; (8000514 <led7_segRun+0x198>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d134      	bne.n	80004fc <led7_segRun+0x180>
			led_status = LED3;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <led7_segRun+0x18c>)
 8000494:	2204      	movs	r2, #4
 8000496:	601a      	str	r2, [r3, #0]
			setTimer(1, 250);
 8000498:	21fa      	movs	r1, #250	; 0xfa
 800049a:	2001      	movs	r0, #1
 800049c:	f000 fee0 	bl	8001260 <setTimer>
		}
		break;
 80004a0:	e02c      	b.n	80004fc <led7_segRun+0x180>
	case LED3:
		//led3 ON
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2140      	movs	r1, #64	; 0x40
 80004a6:	4819      	ldr	r0, [pc, #100]	; (800050c <led7_segRun+0x190>)
 80004a8:	f001 fb63 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	4816      	ldr	r0, [pc, #88]	; (800050c <led7_segRun+0x190>)
 80004b2:	f001 fb5e 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004bc:	4813      	ldr	r0, [pc, #76]	; (800050c <led7_segRun+0x190>)
 80004be:	f001 fb58 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c8:	4810      	ldr	r0, [pc, #64]	; (800050c <led7_segRun+0x190>)
 80004ca:	f001 fb52 	bl	8001b72 <HAL_GPIO_WritePin>
		numToLed(led_buffer[3]);
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <led7_segRun+0x194>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fa9e 	bl	8000a14 <numToLed>

		//change status
		if (timer_flag[1] == 1){
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <led7_segRun+0x198>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d10f      	bne.n	8000500 <led7_segRun+0x184>
			led_status = LED0;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <led7_segRun+0x18c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
			setTimer(1, 250);
 80004e6:	21fa      	movs	r1, #250	; 0xfa
 80004e8:	2001      	movs	r0, #1
 80004ea:	f000 feb9 	bl	8001260 <setTimer>
		}
		break;
 80004ee:	e007      	b.n	8000500 <led7_segRun+0x184>
	default:
		break;
 80004f0:	bf00      	nop
 80004f2:	e006      	b.n	8000502 <led7_segRun+0x186>
		break;
 80004f4:	bf00      	nop
 80004f6:	e004      	b.n	8000502 <led7_segRun+0x186>
		break;
 80004f8:	bf00      	nop
 80004fa:	e002      	b.n	8000502 <led7_segRun+0x186>
		break;
 80004fc:	bf00      	nop
 80004fe:	e000      	b.n	8000502 <led7_segRun+0x186>
		break;
 8000500:	bf00      	nop
	}
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000068 	.word	0x20000068
 800050c:	40010800 	.word	0x40010800
 8000510:	20000090 	.word	0x20000090
 8000514:	20000418 	.word	0x20000418

08000518 <traffic_lightRun>:

//traffic light run
void traffic_lightRun(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

	//traffic light status
	switch (status){
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <traffic_lightRun+0x114>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d878      	bhi.n	8000616 <traffic_lightRun+0xfe>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <traffic_lightRun+0x14>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	08000541 	.word	0x08000541
 8000530:	08000567 	.word	0x08000567
 8000534:	08000593 	.word	0x08000593
 8000538:	080005bf 	.word	0x080005bf
 800053c:	080005eb 	.word	0x080005eb
	case INIT:

		//2 led value
		led1_value = green_duration;
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <traffic_lightRun+0x118>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a3b      	ldr	r2, [pc, #236]	; (8000634 <traffic_lightRun+0x11c>)
 8000546:	6013      	str	r3, [r2, #0]
		led2_value = red_duration;
 8000548:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <traffic_lightRun+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3b      	ldr	r2, [pc, #236]	; (800063c <traffic_lightRun+0x124>)
 800054e:	6013      	str	r3, [r2, #0]
		update_led7seg();
 8000550:	f7ff feb4 	bl	80002bc <update_led7seg>

		setTimer(2, 1000);
 8000554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000558:	2002      	movs	r0, #2
 800055a:	f000 fe81 	bl	8001260 <setTimer>

		status = STATUS1;
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <traffic_lightRun+0x114>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
		break;
 8000564:	e060      	b.n	8000628 <traffic_lightRun+0x110>
	case STATUS1: //GREEN RED
		//traffic light
		GREEN_1();
 8000566:	f000 ff6f 	bl	8001448 <GREEN_1>
		RED_2();
 800056a:	f000 ff99 	bl	80014a0 <RED_2>

		//change status
		if (led1_value == 0){
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <traffic_lightRun+0x11c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d151      	bne.n	800061a <traffic_lightRun+0x102>
			led1_value = yellow_duration;
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <traffic_lightRun+0x128>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	; (8000634 <traffic_lightRun+0x11c>)
 800057c:	6013      	str	r3, [r2, #0]
			led2_value = yellow_duration;
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <traffic_lightRun+0x128>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <traffic_lightRun+0x124>)
 8000584:	6013      	str	r3, [r2, #0]
			update_led7seg();
 8000586:	f7ff fe99 	bl	80002bc <update_led7seg>
			status = STATUS2;
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <traffic_lightRun+0x114>)
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000590:	e043      	b.n	800061a <traffic_lightRun+0x102>
	case STATUS2: //YELLOW RED
		//traffic light
		YELLOW_1();
 8000592:	f000 ff6f 	bl	8001474 <YELLOW_1>
		RED_2();
 8000596:	f000 ff83 	bl	80014a0 <RED_2>

		//change status
		if (led1_value == 0){
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <traffic_lightRun+0x11c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d13d      	bne.n	800061e <traffic_lightRun+0x106>
			led1_value = red_duration;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <traffic_lightRun+0x120>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a23      	ldr	r2, [pc, #140]	; (8000634 <traffic_lightRun+0x11c>)
 80005a8:	6013      	str	r3, [r2, #0]
			led2_value = green_duration;
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <traffic_lightRun+0x118>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a23      	ldr	r2, [pc, #140]	; (800063c <traffic_lightRun+0x124>)
 80005b0:	6013      	str	r3, [r2, #0]
			update_led7seg();
 80005b2:	f7ff fe83 	bl	80002bc <update_led7seg>
			status = STATUS3;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <traffic_lightRun+0x114>)
 80005b8:	2203      	movs	r2, #3
 80005ba:	601a      	str	r2, [r3, #0]
		}
		break;
 80005bc:	e02f      	b.n	800061e <traffic_lightRun+0x106>
	case STATUS3: //RED GREEN
		//traffic light
		RED_1();
 80005be:	f000 ff2d 	bl	800141c <RED_1>
		GREEN_2();
 80005c2:	f000 ff83 	bl	80014cc <GREEN_2>

		//change status
		if (led2_value == 0){
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <traffic_lightRun+0x124>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d129      	bne.n	8000622 <traffic_lightRun+0x10a>
			led1_value = yellow_duration;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <traffic_lightRun+0x128>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <traffic_lightRun+0x11c>)
 80005d4:	6013      	str	r3, [r2, #0]
			led2_value = yellow_duration;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <traffic_lightRun+0x128>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <traffic_lightRun+0x124>)
 80005dc:	6013      	str	r3, [r2, #0]
			update_led7seg();
 80005de:	f7ff fe6d 	bl	80002bc <update_led7seg>
			status = STATUS4;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <traffic_lightRun+0x114>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80005e8:	e01b      	b.n	8000622 <traffic_lightRun+0x10a>
	case STATUS4: //RED YELLOW
		//traffic light
		YELLOW_2();
 80005ea:	f000 ff85 	bl	80014f8 <YELLOW_2>
		RED_1();
 80005ee:	f000 ff15 	bl	800141c <RED_1>

		//change status
		if (led2_value == 0){
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <traffic_lightRun+0x124>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d115      	bne.n	8000626 <traffic_lightRun+0x10e>
			led1_value = green_duration;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <traffic_lightRun+0x118>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <traffic_lightRun+0x11c>)
 8000600:	6013      	str	r3, [r2, #0]
			led2_value = red_duration;
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <traffic_lightRun+0x120>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0d      	ldr	r2, [pc, #52]	; (800063c <traffic_lightRun+0x124>)
 8000608:	6013      	str	r3, [r2, #0]
			update_led7seg();
 800060a:	f7ff fe57 	bl	80002bc <update_led7seg>
			status = STATUS1;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <traffic_lightRun+0x114>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
		}
		break;
 8000614:	e007      	b.n	8000626 <traffic_lightRun+0x10e>
	default:
		break;
 8000616:	bf00      	nop
 8000618:	e006      	b.n	8000628 <traffic_lightRun+0x110>
		break;
 800061a:	bf00      	nop
 800061c:	e004      	b.n	8000628 <traffic_lightRun+0x110>
		break;
 800061e:	bf00      	nop
 8000620:	e002      	b.n	8000628 <traffic_lightRun+0x110>
		break;
 8000622:	bf00      	nop
 8000624:	e000      	b.n	8000628 <traffic_lightRun+0x110>
		break;
 8000626:	bf00      	nop
	}
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000006c 	.word	0x2000006c
 8000630:	20000038 	.word	0x20000038
 8000634:	20000070 	.word	0x20000070
 8000638:	20000034 	.word	0x20000034
 800063c:	20000074 	.word	0x20000074
 8000640:	2000003c 	.word	0x2000003c

08000644 <fsm_automatic>:

//AUTO
void fsm_automatic(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	traffic_lightRun();
 8000648:	f7ff ff66 	bl	8000518 <traffic_lightRun>
	led7_segRun();
 800064c:	f7ff fe96 	bl	800037c <led7_segRun>
	update_led_for_1s();
 8000650:	f7ff fe74 	bl	800033c <update_led_for_1s>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <increase_duration>:

#include "fsm_manual.h"


//increse duration traffic light
void increase_duration(){
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	led1_value++;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <increase_duration+0x24>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <increase_duration+0x24>)
 8000664:	6013      	str	r3, [r2, #0]
	if (led1_value == 100) {
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <increase_duration+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b64      	cmp	r3, #100	; 0x64
 800066c:	d102      	bne.n	8000674 <increase_duration+0x1c>
		led1_value = 0;
 800066e:	4b03      	ldr	r3, [pc, #12]	; (800067c <increase_duration+0x24>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	}
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000070 	.word	0x20000070

08000680 <fsm_manual>:

void fsm_manual(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	switch (mode){
 8000684:	4b89      	ldr	r3, [pc, #548]	; (80008ac <fsm_manual+0x22c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3b01      	subs	r3, #1
 800068a:	2b03      	cmp	r3, #3
 800068c:	f200 81ae 	bhi.w	80009ec <fsm_manual+0x36c>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <fsm_manual+0x18>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006d9 	.word	0x080006d9
 80006a0:	0800075b 	.word	0x0800075b
 80006a4:	080007dd 	.word	0x080007dd
	case MODE1: //AUTO
		fsm_automatic();
 80006a8:	f7ff ffcc 	bl	8000644 <fsm_automatic>

		//change MODE
		if (is_button_pressed(0)){
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff fd4d 	bl	800014c <is_button_pressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	f000 819b 	beq.w	80009f0 <fsm_manual+0x370>
			led1_value = 0;
 80006ba:	4b7d      	ldr	r3, [pc, #500]	; (80008b0 <fsm_manual+0x230>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
			led2_value = 1;
 80006c0:	4b7c      	ldr	r3, [pc, #496]	; (80008b4 <fsm_manual+0x234>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
			update_led7seg();
 80006c6:	f7ff fdf9 	bl	80002bc <update_led7seg>
			led_status = INIT;
 80006ca:	4b7b      	ldr	r3, [pc, #492]	; (80008b8 <fsm_manual+0x238>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
			mode = MODE2;
 80006d0:	4b76      	ldr	r3, [pc, #472]	; (80008ac <fsm_manual+0x22c>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80006d6:	e18b      	b.n	80009f0 <fsm_manual+0x370>
	case MODE2: //increase red time duration

		//red display
		RED_1();
 80006d8:	f000 fea0 	bl	800141c <RED_1>
		RED_2();
 80006dc:	f000 fee0 	bl	80014a0 <RED_2>

		//increase red_duration
		if (is_button_pressed(1)){
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff fd33 	bl	800014c <is_button_pressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <fsm_manual+0x74>
			increase_duration();
 80006ec:	f7ff ffb4 	bl	8000658 <increase_duration>
			update_led7seg();
 80006f0:	f7ff fde4 	bl	80002bc <update_led7seg>
		}

		//change MODE
		if (is_button_pressed(0)){
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fd29 	bl	800014c <is_button_pressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <fsm_manual+0xa4>
			red_duration = -1;
 8000700:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <fsm_manual+0x23c>)
 8000702:	f04f 32ff 	mov.w	r2, #4294967295
 8000706:	601a      	str	r2, [r3, #0]
			led1_value = 0;
 8000708:	4b69      	ldr	r3, [pc, #420]	; (80008b0 <fsm_manual+0x230>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
			led2_value = 2;
 800070e:	4b69      	ldr	r3, [pc, #420]	; (80008b4 <fsm_manual+0x234>)
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
			update_led7seg();
 8000714:	f7ff fdd2 	bl	80002bc <update_led7seg>
			led_status = INIT;
 8000718:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <fsm_manual+0x238>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
			mode = MODE3;
 800071e:	4b63      	ldr	r3, [pc, #396]	; (80008ac <fsm_manual+0x22c>)
 8000720:	2203      	movs	r2, #3
 8000722:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed(2)){
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff fd11 	bl	800014c <is_button_pressed>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d011      	beq.n	8000754 <fsm_manual+0xd4>
			red_duration = led1_value;
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <fsm_manual+0x230>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a61      	ldr	r2, [pc, #388]	; (80008bc <fsm_manual+0x23c>)
 8000736:	6013      	str	r3, [r2, #0]
			led1_value = 0;
 8000738:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <fsm_manual+0x230>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
			led2_value = 2;
 800073e:	4b5d      	ldr	r3, [pc, #372]	; (80008b4 <fsm_manual+0x234>)
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
			update_led7seg();
 8000744:	f7ff fdba 	bl	80002bc <update_led7seg>
			led_status = INIT;
 8000748:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <fsm_manual+0x238>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
			mode = MODE3;
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <fsm_manual+0x22c>)
 8000750:	2203      	movs	r2, #3
 8000752:	601a      	str	r2, [r3, #0]
		}

		led7_segRun();
 8000754:	f7ff fe12 	bl	800037c <led7_segRun>
		break;
 8000758:	e14b      	b.n	80009f2 <fsm_manual+0x372>
	case MODE3: // increase yellow time duration

		//yellow display
		YELLOW_1();
 800075a:	f000 fe8b 	bl	8001474 <YELLOW_1>
		YELLOW_2();
 800075e:	f000 fecb 	bl	80014f8 <YELLOW_2>

		//increase yellow_duration
		if (is_button_pressed(1)){
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fcf2 	bl	800014c <is_button_pressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <fsm_manual+0xf6>
			increase_duration();
 800076e:	f7ff ff73 	bl	8000658 <increase_duration>
			update_led7seg();
 8000772:	f7ff fda3 	bl	80002bc <update_led7seg>
		}

		//change MODE
		if (is_button_pressed(0)){
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fce8 	bl	800014c <is_button_pressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d011      	beq.n	80007a6 <fsm_manual+0x126>
			yellow_duration = -1;
 8000782:	4b4f      	ldr	r3, [pc, #316]	; (80008c0 <fsm_manual+0x240>)
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	601a      	str	r2, [r3, #0]
			led1_value = 0;
 800078a:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <fsm_manual+0x230>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
			led2_value = 2;
 8000790:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <fsm_manual+0x234>)
 8000792:	2202      	movs	r2, #2
 8000794:	601a      	str	r2, [r3, #0]
			update_led7seg();
 8000796:	f7ff fd91 	bl	80002bc <update_led7seg>
			led_status = INIT;
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <fsm_manual+0x238>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
			mode = MODE4;
 80007a0:	4b42      	ldr	r3, [pc, #264]	; (80008ac <fsm_manual+0x22c>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed(2)){
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fcd0 	bl	800014c <is_button_pressed>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d011      	beq.n	80007d6 <fsm_manual+0x156>
			yellow_duration = led1_value;
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <fsm_manual+0x230>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a42      	ldr	r2, [pc, #264]	; (80008c0 <fsm_manual+0x240>)
 80007b8:	6013      	str	r3, [r2, #0]
			led1_value = 0;
 80007ba:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <fsm_manual+0x230>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
			led2_value = 2;
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <fsm_manual+0x234>)
 80007c2:	2202      	movs	r2, #2
 80007c4:	601a      	str	r2, [r3, #0]
			update_led7seg();
 80007c6:	f7ff fd79 	bl	80002bc <update_led7seg>
			led_status = INIT;
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <fsm_manual+0x238>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
			mode = MODE4;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <fsm_manual+0x22c>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	601a      	str	r2, [r3, #0]
		}

		led7_segRun();
 80007d6:	f7ff fdd1 	bl	800037c <led7_segRun>
		break;
 80007da:	e10a      	b.n	80009f2 <fsm_manual+0x372>
	case MODE4: // increase green time duration

		//green display
		GREEN_1();
 80007dc:	f000 fe34 	bl	8001448 <GREEN_1>
		GREEN_2();
 80007e0:	f000 fe74 	bl	80014cc <GREEN_2>

		//increase green_duration
		if (is_button_pressed(1)){
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fcb1 	bl	800014c <is_button_pressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <fsm_manual+0x178>
			increase_duration();
 80007f0:	f7ff ff32 	bl	8000658 <increase_duration>
			update_led7seg();
 80007f4:	f7ff fd62 	bl	80002bc <update_led7seg>
		}

		//change MODE
		if (is_button_pressed(0)){
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fca7 	bl	800014c <is_button_pressed>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d07c      	beq.n	80008fe <fsm_manual+0x27e>
			green_duration = -1;
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <fsm_manual+0x244>)
 8000806:	f04f 32ff 	mov.w	r2, #4294967295
 800080a:	601a      	str	r2, [r3, #0]

			//check available
			if (((red_duration == -1) && (green_duration == -1)) ||
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <fsm_manual+0x23c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d104      	bne.n	8000820 <fsm_manual+0x1a0>
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <fsm_manual+0x244>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081e:	d013      	beq.n	8000848 <fsm_manual+0x1c8>
			((green_duration == -1) && (yellow_duration == -1)) ||
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <fsm_manual+0x244>)
 8000822:	681b      	ldr	r3, [r3, #0]
			if (((red_duration == -1) && (green_duration == -1)) ||
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d104      	bne.n	8000834 <fsm_manual+0x1b4>
			((green_duration == -1) && (yellow_duration == -1)) ||
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <fsm_manual+0x240>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000832:	d009      	beq.n	8000848 <fsm_manual+0x1c8>
			((yellow_duration == -1) && (red_duration == -1))){
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <fsm_manual+0x240>)
 8000836:	681b      	ldr	r3, [r3, #0]
			((green_duration == -1) && (yellow_duration == -1)) ||
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d10e      	bne.n	800085c <fsm_manual+0x1dc>
			((yellow_duration == -1) && (red_duration == -1))){
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <fsm_manual+0x23c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000846:	d109      	bne.n	800085c <fsm_manual+0x1dc>
				red_duration = DEFAULT_RED;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <fsm_manual+0x23c>)
 800084a:	2205      	movs	r2, #5
 800084c:	601a      	str	r2, [r3, #0]
				green_duration = DEFAULT_GREEN;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <fsm_manual+0x244>)
 8000850:	2203      	movs	r2, #3
 8000852:	601a      	str	r2, [r3, #0]
				yellow_duration = DEFAULT_YELLOW;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <fsm_manual+0x240>)
 8000856:	2202      	movs	r2, #2
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e047      	b.n	80008ec <fsm_manual+0x26c>
			}else if (red_duration == -1){
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <fsm_manual+0x23c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d107      	bne.n	8000876 <fsm_manual+0x1f6>
				red_duration = green_duration + yellow_duration;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <fsm_manual+0x244>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <fsm_manual+0x240>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <fsm_manual+0x23c>)
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e03a      	b.n	80008ec <fsm_manual+0x26c>
			}else if (green_duration == -1){
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <fsm_manual+0x244>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087e:	d107      	bne.n	8000890 <fsm_manual+0x210>
				green_duration = red_duration - yellow_duration;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <fsm_manual+0x23c>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <fsm_manual+0x240>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <fsm_manual+0x244>)
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e02d      	b.n	80008ec <fsm_manual+0x26c>
			}else if (yellow_duration == -1){
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <fsm_manual+0x240>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d116      	bne.n	80008c8 <fsm_manual+0x248>
				yellow_duration = red_duration - green_duration;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <fsm_manual+0x23c>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <fsm_manual+0x244>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <fsm_manual+0x240>)
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	e020      	b.n	80008ec <fsm_manual+0x26c>
 80008aa:	bf00      	nop
 80008ac:	20000030 	.word	0x20000030
 80008b0:	20000070 	.word	0x20000070
 80008b4:	20000074 	.word	0x20000074
 80008b8:	20000068 	.word	0x20000068
 80008bc:	20000034 	.word	0x20000034
 80008c0:	2000003c 	.word	0x2000003c
 80008c4:	20000038 	.word	0x20000038
			}else if (red_duration != green_duration + yellow_duration){
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <fsm_manual+0x378>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <fsm_manual+0x37c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	441a      	add	r2, r3
 80008d2:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <fsm_manual+0x380>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d008      	beq.n	80008ec <fsm_manual+0x26c>
				red_duration = DEFAULT_RED;
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <fsm_manual+0x380>)
 80008dc:	2205      	movs	r2, #5
 80008de:	601a      	str	r2, [r3, #0]
				green_duration = DEFAULT_GREEN;
 80008e0:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <fsm_manual+0x378>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	601a      	str	r2, [r3, #0]
				yellow_duration = DEFAULT_YELLOW;
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <fsm_manual+0x37c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	601a      	str	r2, [r3, #0]

			}

			//change MODE
			led_status = INIT;
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <fsm_manual+0x384>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
			status = INIT;
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <fsm_manual+0x388>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 80008f8:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <fsm_manual+0x38c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
		}
		if (is_button_pressed(2)){
 80008fe:	2002      	movs	r0, #2
 8000900:	f7ff fc24 	bl	800014c <is_button_pressed>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d06d      	beq.n	80009e6 <fsm_manual+0x366>
			green_duration = led1_value;
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <fsm_manual+0x390>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <fsm_manual+0x378>)
 8000910:	6013      	str	r3, [r2, #0]

			//check available
			if (((red_duration == -1) && (green_duration == -1)) ||
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <fsm_manual+0x380>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091a:	d104      	bne.n	8000926 <fsm_manual+0x2a6>
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <fsm_manual+0x378>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000924:	d013      	beq.n	800094e <fsm_manual+0x2ce>
			((green_duration == -1) && (yellow_duration == -1)) ||
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <fsm_manual+0x378>)
 8000928:	681b      	ldr	r3, [r3, #0]
			if (((red_duration == -1) && (green_duration == -1)) ||
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d104      	bne.n	800093a <fsm_manual+0x2ba>
			((green_duration == -1) && (yellow_duration == -1)) ||
 8000930:	4b32      	ldr	r3, [pc, #200]	; (80009fc <fsm_manual+0x37c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d009      	beq.n	800094e <fsm_manual+0x2ce>
			((yellow_duration == -1) && (red_duration == -1))){
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <fsm_manual+0x37c>)
 800093c:	681b      	ldr	r3, [r3, #0]
			((green_duration == -1) && (yellow_duration == -1)) ||
 800093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000942:	d10e      	bne.n	8000962 <fsm_manual+0x2e2>
			((yellow_duration == -1) && (red_duration == -1))){
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <fsm_manual+0x380>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d109      	bne.n	8000962 <fsm_manual+0x2e2>
				red_duration = DEFAULT_RED;
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <fsm_manual+0x380>)
 8000950:	2205      	movs	r2, #5
 8000952:	601a      	str	r2, [r3, #0]
				green_duration = DEFAULT_GREEN;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <fsm_manual+0x378>)
 8000956:	2203      	movs	r2, #3
 8000958:	601a      	str	r2, [r3, #0]
				yellow_duration = DEFAULT_YELLOW;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <fsm_manual+0x37c>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e038      	b.n	80009d4 <fsm_manual+0x354>
			}else if (red_duration == -1){
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <fsm_manual+0x380>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096a:	d107      	bne.n	800097c <fsm_manual+0x2fc>
				red_duration = green_duration + yellow_duration;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <fsm_manual+0x378>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <fsm_manual+0x37c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <fsm_manual+0x380>)
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e02b      	b.n	80009d4 <fsm_manual+0x354>
			}else if (green_duration == -1){
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <fsm_manual+0x378>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d107      	bne.n	8000996 <fsm_manual+0x316>
				green_duration = red_duration - yellow_duration;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <fsm_manual+0x380>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <fsm_manual+0x37c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <fsm_manual+0x378>)
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	e01e      	b.n	80009d4 <fsm_manual+0x354>
			}else if (yellow_duration == -1){
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <fsm_manual+0x37c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099e:	d107      	bne.n	80009b0 <fsm_manual+0x330>
				yellow_duration = red_duration - green_duration;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <fsm_manual+0x380>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <fsm_manual+0x378>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <fsm_manual+0x37c>)
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	e011      	b.n	80009d4 <fsm_manual+0x354>
			}else if (red_duration != green_duration + yellow_duration){
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <fsm_manual+0x378>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <fsm_manual+0x37c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <fsm_manual+0x380>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d008      	beq.n	80009d4 <fsm_manual+0x354>
				red_duration = DEFAULT_RED;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <fsm_manual+0x380>)
 80009c4:	2205      	movs	r2, #5
 80009c6:	601a      	str	r2, [r3, #0]
				green_duration = DEFAULT_GREEN;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <fsm_manual+0x378>)
 80009ca:	2203      	movs	r2, #3
 80009cc:	601a      	str	r2, [r3, #0]
				yellow_duration = DEFAULT_YELLOW;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <fsm_manual+0x37c>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]

			}

			//change MODE
			led_status = INIT;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <fsm_manual+0x384>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
			status = INIT;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <fsm_manual+0x388>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <fsm_manual+0x38c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
		}

		led7_segRun();
 80009e6:	f7ff fcc9 	bl	800037c <led7_segRun>
		break;
 80009ea:	e002      	b.n	80009f2 <fsm_manual+0x372>
	default:
		break;
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <fsm_manual+0x372>
		break;
 80009f0:	bf00      	nop
	}
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000038 	.word	0x20000038
 80009fc:	2000003c 	.word	0x2000003c
 8000a00:	20000034 	.word	0x20000034
 8000a04:	20000068 	.word	0x20000068
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	20000030 	.word	0x20000030
 8000a10:	20000070 	.word	0x20000070

08000a14 <numToLed>:



#include "led7_segment.h"

void numToLed(int num){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b09      	cmp	r3, #9
 8000a20:	d834      	bhi.n	8000a8c <numToLed+0x78>
 8000a22:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <numToLed+0x14>)
 8000a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a28:	08000a51 	.word	0x08000a51
 8000a2c:	08000a57 	.word	0x08000a57
 8000a30:	08000a5d 	.word	0x08000a5d
 8000a34:	08000a63 	.word	0x08000a63
 8000a38:	08000a69 	.word	0x08000a69
 8000a3c:	08000a6f 	.word	0x08000a6f
 8000a40:	08000a75 	.word	0x08000a75
 8000a44:	08000a7b 	.word	0x08000a7b
 8000a48:	08000a81 	.word	0x08000a81
 8000a4c:	08000a87 	.word	0x08000a87
	switch(num){
	case 0:
		ZERO();
 8000a50:	f000 f822 	bl	8000a98 <ZERO>
		break;
 8000a54:	e01b      	b.n	8000a8e <numToLed+0x7a>
	case 1:
		ONE();
 8000a56:	f000 f849 	bl	8000aec <ONE>
		break;
 8000a5a:	e018      	b.n	8000a8e <numToLed+0x7a>
	case 2:
		TWO();
 8000a5c:	f000 f870 	bl	8000b40 <TWO>
		break;
 8000a60:	e015      	b.n	8000a8e <numToLed+0x7a>
	case 3:
		THREE();
 8000a62:	f000 f897 	bl	8000b94 <THREE>
		break;
 8000a66:	e012      	b.n	8000a8e <numToLed+0x7a>
	case 4:
		FOUR();
 8000a68:	f000 f8be 	bl	8000be8 <FOUR>
		break;
 8000a6c:	e00f      	b.n	8000a8e <numToLed+0x7a>
	case 5:
		FIVE();
 8000a6e:	f000 f8e5 	bl	8000c3c <FIVE>
		break;
 8000a72:	e00c      	b.n	8000a8e <numToLed+0x7a>
	case 6:
		SIX();
 8000a74:	f000 f90c 	bl	8000c90 <SIX>
		break;
 8000a78:	e009      	b.n	8000a8e <numToLed+0x7a>
	case 7:
		SEVEN();
 8000a7a:	f000 f933 	bl	8000ce4 <SEVEN>
		break;
 8000a7e:	e006      	b.n	8000a8e <numToLed+0x7a>
	case 8:
		EIGHT();
 8000a80:	f000 f95a 	bl	8000d38 <EIGHT>
		break;
 8000a84:	e003      	b.n	8000a8e <numToLed+0x7a>
	case 9:
		NINE();
 8000a86:	f000 f981 	bl	8000d8c <NINE>
		break;
 8000a8a:	e000      	b.n	8000a8e <numToLed+0x7a>
	default:
		break;
 8000a8c:	bf00      	nop
	}
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop

08000a98 <ZERO>:
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
}
void ZERO(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <ZERO+0x50>)
 8000aa2:	f001 f866 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <ZERO+0x50>)
 8000aac:	f001 f861 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <ZERO+0x50>)
 8000ab6:	f001 f85c 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <ZERO+0x50>)
 8000ac0:	f001 f857 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <ZERO+0x50>)
 8000aca:	f001 f852 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <ZERO+0x50>)
 8000ad4:	f001 f84d 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ZERO+0x50>)
 8000ade:	f001 f848 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <ONE>:
void ONE(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <ONE+0x50>)
 8000af6:	f001 f83c 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2102      	movs	r1, #2
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <ONE+0x50>)
 8000b00:	f001 f837 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <ONE+0x50>)
 8000b0a:	f001 f832 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2108      	movs	r1, #8
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <ONE+0x50>)
 8000b14:	f001 f82d 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <ONE+0x50>)
 8000b1e:	f001 f828 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2120      	movs	r1, #32
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <ONE+0x50>)
 8000b28:	f001 f823 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <ONE+0x50>)
 8000b32:	f001 f81e 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <TWO>:
void TWO(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <TWO+0x50>)
 8000b4a:	f001 f812 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <TWO+0x50>)
 8000b54:	f001 f80d 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <TWO+0x50>)
 8000b5e:	f001 f808 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2108      	movs	r1, #8
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <TWO+0x50>)
 8000b68:	f001 f803 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <TWO+0x50>)
 8000b72:	f000 fffe 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <TWO+0x50>)
 8000b7c:	f000 fff9 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TWO+0x50>)
 8000b86:	f000 fff4 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <THREE>:
void THREE(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4811      	ldr	r0, [pc, #68]	; (8000be4 <THREE+0x50>)
 8000b9e:	f000 ffe8 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	480f      	ldr	r0, [pc, #60]	; (8000be4 <THREE+0x50>)
 8000ba8:	f000 ffe3 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <THREE+0x50>)
 8000bb2:	f000 ffde 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <THREE+0x50>)
 8000bbc:	f000 ffd9 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <THREE+0x50>)
 8000bc6:	f000 ffd4 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <THREE+0x50>)
 8000bd0:	f000 ffcf 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <THREE+0x50>)
 8000bda:	f000 ffca 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <FOUR>:
void FOUR(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <FOUR+0x50>)
 8000bf2:	f000 ffbe 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <FOUR+0x50>)
 8000bfc:	f000 ffb9 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2104      	movs	r1, #4
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <FOUR+0x50>)
 8000c06:	f000 ffb4 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <FOUR+0x50>)
 8000c10:	f000 ffaf 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <FOUR+0x50>)
 8000c1a:	f000 ffaa 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <FOUR+0x50>)
 8000c24:	f000 ffa5 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <FOUR+0x50>)
 8000c2e:	f000 ffa0 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <FIVE>:
void FIVE(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <FIVE+0x50>)
 8000c46:	f000 ff94 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <FIVE+0x50>)
 8000c50:	f000 ff8f 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2104      	movs	r1, #4
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <FIVE+0x50>)
 8000c5a:	f000 ff8a 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2108      	movs	r1, #8
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <FIVE+0x50>)
 8000c64:	f000 ff85 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <FIVE+0x50>)
 8000c6e:	f000 ff80 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2120      	movs	r1, #32
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <FIVE+0x50>)
 8000c78:	f000 ff7b 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <FIVE+0x50>)
 8000c82:	f000 ff76 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <SIX>:
void SIX(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <SIX+0x50>)
 8000c9a:	f000 ff6a 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	480f      	ldr	r0, [pc, #60]	; (8000ce0 <SIX+0x50>)
 8000ca4:	f000 ff65 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2104      	movs	r1, #4
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <SIX+0x50>)
 8000cae:	f000 ff60 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <SIX+0x50>)
 8000cb8:	f000 ff5b 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <SIX+0x50>)
 8000cc2:	f000 ff56 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <SIX+0x50>)
 8000ccc:	f000 ff51 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <SIX+0x50>)
 8000cd6:	f000 ff4c 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <SEVEN>:
void SEVEN(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <SEVEN+0x50>)
 8000cee:	f000 ff40 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <SEVEN+0x50>)
 8000cf8:	f000 ff3b 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <SEVEN+0x50>)
 8000d02:	f000 ff36 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2108      	movs	r1, #8
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <SEVEN+0x50>)
 8000d0c:	f000 ff31 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <SEVEN+0x50>)
 8000d16:	f000 ff2c 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <SEVEN+0x50>)
 8000d20:	f000 ff27 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <SEVEN+0x50>)
 8000d2a:	f000 ff22 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <EIGHT>:
void EIGHT(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <EIGHT+0x50>)
 8000d42:	f000 ff16 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <EIGHT+0x50>)
 8000d4c:	f000 ff11 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <EIGHT+0x50>)
 8000d56:	f000 ff0c 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <EIGHT+0x50>)
 8000d60:	f000 ff07 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <EIGHT+0x50>)
 8000d6a:	f000 ff02 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <EIGHT+0x50>)
 8000d74:	f000 fefd 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <EIGHT+0x50>)
 8000d7e:	f000 fef8 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <NINE>:
void NINE(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <NINE+0x50>)
 8000d96:	f000 feec 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <NINE+0x50>)
 8000da0:	f000 fee7 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <NINE+0x50>)
 8000daa:	f000 fee2 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2108      	movs	r1, #8
 8000db2:	480a      	ldr	r0, [pc, #40]	; (8000ddc <NINE+0x50>)
 8000db4:	f000 fedd 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <NINE+0x50>)
 8000dbe:	f000 fed8 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <NINE+0x50>)
 8000dc8:	f000 fed3 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <NINE+0x50>)
 8000dd2:	f000 fece 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fbc4 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f824 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 f8aa 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000df0:	f000 f85c 	bl	8000eac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0x44>)
 8000df6:	f001 fb01 	bl	80023fc <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000dfa:	f000 f923 	bl	8001044 <SCH_Init>

  SCH_Add_Task(timerRun, 0, TICK);
 8000dfe:	220a      	movs	r2, #10
 8000e00:	2100      	movs	r1, #0
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <main+0x48>)
 8000e04:	f000 f92a 	bl	800105c <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, TICK);
 8000e08:	220a      	movs	r2, #10
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <main+0x4c>)
 8000e0e:	f000 f925 	bl	800105c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 0, TICK);
 8000e12:	220a      	movs	r2, #10
 8000e14:	2100      	movs	r1, #0
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <main+0x50>)
 8000e18:	f000 f920 	bl	800105c <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000e1c:	f000 f9de 	bl	80011dc <SCH_Dispatch_Tasks>
 8000e20:	e7fc      	b.n	8000e1c <main+0x3c>
 8000e22:	bf00      	nop
 8000e24:	200000a0 	.word	0x200000a0
 8000e28:	080012a1 	.word	0x080012a1
 8000e2c:	08000181 	.word	0x08000181
 8000e30:	08000681 	.word	0x08000681

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	; 0x40
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	2228      	movs	r2, #40	; 0x28
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fe8a 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fe9a 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e76:	f000 f8df 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 f906 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 f8cb 	bl	8001038 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3740      	adds	r7, #64	; 0x40
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ece:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000ed2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000ee0:	2209      	movs	r2, #9
 8000ee2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef0:	4813      	ldr	r0, [pc, #76]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 fa33 	bl	800235c <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000efc:	f000 f89c 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000f0e:	f001 fbb1 	bl	8002674 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f18:	f000 f88e 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_TIM2_Init+0x94>)
 8000f2a:	f001 fd89 	bl	8002a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f34:	f000 f880 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000a0 	.word	0x200000a0

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_GPIO_Init+0xd0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000fa6:	481c      	ldr	r0, [pc, #112]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000fa8:	f000 fde3 	bl	8001b72 <HAL_GPIO_WritePin>
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|TEST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000fac:	2200      	movs	r2, #0
 8000fae:	217f      	movs	r1, #127	; 0x7f
 8000fb0:	481a      	ldr	r0, [pc, #104]	; (800101c <MX_GPIO_Init+0xd8>)
 8000fb2:	f000 fdde 	bl	8001b72 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000fb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <MX_GPIO_Init+0xdc>)
 8000fcc:	f000 fc40 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_GREEN2_Pin LED_YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin TEST_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8000fd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fd4:	613b      	str	r3, [r7, #16]
                          |LED_GREEN2_Pin|LED_YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000fea:	f000 fc31 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000fee:	237f      	movs	r3, #127	; 0x7f
 8000ff0:	613b      	str	r3, [r7, #16]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_GPIO_Init+0xd8>)
 8001006:	f000 fc23 	bl	8001850 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40011000 	.word	0x40011000

08001024 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800102c:	f000 f876 	bl	800111c <SCH_Update>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <SCH_Init>:
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task ;

#define TICK 10

void SCH_Init(void){
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <SCH_Init+0x14>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200000e8 	.word	0x200000e8

0800105c <SCH_Add_Task>:

void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS){
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <SCH_Add_Task+0xb4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b27      	cmp	r3, #39	; 0x27
 800106e:	d84a      	bhi.n	8001106 <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <SCH_Add_Task+0xb4>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <SCH_Add_Task+0xb8>)
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SCH_Add_Task+0xb4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <SCH_Add_Task+0xbc>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	491f      	ldr	r1, [pc, #124]	; (8001114 <SCH_Add_Task+0xb8>)
 8001098:	4603      	mov	r3, r0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4403      	add	r3, r0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3304      	adds	r3, #4
 80010a4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <SCH_Add_Task+0xb4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <SCH_Add_Task+0xbc>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	4917      	ldr	r1, [pc, #92]	; (8001114 <SCH_Add_Task+0xb8>)
 80010b8:	4603      	mov	r3, r0
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4403      	add	r3, r0
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3308      	adds	r3, #8
 80010c4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SCH_Add_Task+0xb4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <SCH_Add_Task+0xb8>)
 80010ce:	460b      	mov	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	330c      	adds	r3, #12
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SCH_Add_Task+0xb4>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <SCH_Add_Task+0xb4>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SCH_Add_Task+0xb8>)
 80010ec:	460b      	mov	r3, r1
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3310      	adds	r3, #16
 80010f8:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SCH_Add_Task+0xb4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <SCH_Add_Task+0xb4>)
 8001104:	701a      	strb	r2, [r3, #0]
	}
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200000e8 	.word	0x200000e8
 8001114:	200000ec 	.word	0x200000ec
 8001118:	cccccccd 	.word	0xcccccccd

0800111c <SCH_Update>:

void SCH_Update (void){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	e048      	b.n	80011ba <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0){
 8001128:	492a      	ldr	r1, [pc, #168]	; (80011d4 <SCH_Update+0xb8>)
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3304      	adds	r3, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 800113e:	4925      	ldr	r1, [pc, #148]	; (80011d4 <SCH_Update+0xb8>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	3304      	adds	r3, #4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1e59      	subs	r1, r3, #1
 8001152:	4820      	ldr	r0, [pc, #128]	; (80011d4 <SCH_Update+0xb8>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4403      	add	r3, r0
 8001160:	3304      	adds	r3, #4
 8001162:	6019      	str	r1, [r3, #0]
 8001164:	e026      	b.n	80011b4 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001166:	491b      	ldr	r1, [pc, #108]	; (80011d4 <SCH_Update+0xb8>)
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3308      	adds	r3, #8
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <SCH_Update+0xb8>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4403      	add	r3, r0
 8001186:	3304      	adds	r3, #4
 8001188:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 800118a:	4912      	ldr	r1, [pc, #72]	; (80011d4 <SCH_Update+0xb8>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	330c      	adds	r3, #12
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <SCH_Update+0xb8>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	330c      	adds	r3, #12
 80011b0:	4602      	mov	r2, r0
 80011b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SCH_Update+0xbc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	dbb0      	blt.n	8001128 <SCH_Update+0xc>
		}
	}
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200000ec 	.word	0x200000ec
 80011d8:	200000e8 	.word	0x200000e8

080011dc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks (void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e02b      	b.n	8001240 <SCH_Dispatch_Tasks+0x64>
		if (SCH_tasks_G[i].RunMe > 0){
 80011e8:	491b      	ldr	r1, [pc, #108]	; (8001258 <SCH_Dispatch_Tasks+0x7c>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01d      	beq.n	800123a <SCH_Dispatch_Tasks+0x5e>
			SCH_tasks_G[i].RunMe--;
 80011fe:	4916      	ldr	r1, [pc, #88]	; (8001258 <SCH_Dispatch_Tasks+0x7c>)
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	4910      	ldr	r1, [pc, #64]	; (8001258 <SCH_Dispatch_Tasks+0x7c>)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	330c      	adds	r3, #12
 8001224:	4602      	mov	r2, r0
 8001226:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001228:	490b      	ldr	r1, [pc, #44]	; (8001258 <SCH_Dispatch_Tasks+0x7c>)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4798      	blx	r3
	for (int i = 0; i < current_index_task; i++){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SCH_Dispatch_Tasks+0x80>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4293      	cmp	r3, r2
 800124a:	dbcd      	blt.n	80011e8 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000ec 	.word	0x200000ec
 800125c:	200000e8 	.word	0x200000e8

08001260 <setTimer>:
#define N0_OF_TIMER 3

int timer_counter[N0_OF_TIMER];
int timer_flag[N0_OF_TIMER];

void setTimer(int index, int counter){
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	timer_counter[index] = counter / TICK;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <setTimer+0x34>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1092      	asrs	r2, r2, #2
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <setTimer+0x38>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <setTimer+0x3c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2100      	movs	r1, #0
 8001286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	66666667 	.word	0x66666667
 8001298:	2000040c 	.word	0x2000040c
 800129c:	20000418 	.word	0x20000418

080012a0 <timerRun>:
void clearTimer(int index){
	timer_counter[index] = 0;
	timer_flag[index] = 0;
}

void timerRun(){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_TIMER; i++){
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	e01c      	b.n	80012e6 <timerRun+0x46>
		if (timer_counter[i] > 0){
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <timerRun+0x58>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	dd13      	ble.n	80012e0 <timerRun+0x40>
			timer_counter[i]--;
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <timerRun+0x58>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <timerRun+0x58>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <timerRun+0x58>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc04      	bgt.n	80012e0 <timerRun+0x40>
				timer_flag[i] = 1;
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <timerRun+0x5c>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2101      	movs	r1, #1
 80012dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_TIMER; i++){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	dddf      	ble.n	80012ac <timerRun+0xc>
			}
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000040c 	.word	0x2000040c
 80012fc:	20000418 	.word	0x20000418

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d113      	bne.n	800139e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_TIM_Base_MspInit+0x44>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_TIM_Base_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0x44>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	201c      	movs	r0, #28
 8001394:	f000 fa25 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001398:	201c      	movs	r0, #28
 800139a:	f000 fa3e 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <NMI_Handler+0x4>

080013b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler+0x4>

080013be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <UsageFault_Handler+0x4>

080013ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f000 f903 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM2_IRQHandler+0x10>)
 8001402:	f001 f847 	bl	8002494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000a0 	.word	0x200000a0

08001410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <RED_1>:
 */


#include "traffic_light.h"

void RED_1(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2101      	movs	r1, #1
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <RED_1+0x28>)
 8001426:	f000 fba4 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2102      	movs	r1, #2
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <RED_1+0x28>)
 8001430:	f000 fb9f 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2104      	movs	r1, #4
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <RED_1+0x28>)
 800143a:	f000 fb9a 	bl	8001b72 <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010800 	.word	0x40010800

08001448 <GREEN_1>:

void GREEN_1(){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2101      	movs	r1, #1
 8001450:	4807      	ldr	r0, [pc, #28]	; (8001470 <GREEN_1+0x28>)
 8001452:	f000 fb8e 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <GREEN_1+0x28>)
 800145c:	f000 fb89 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2104      	movs	r1, #4
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <GREEN_1+0x28>)
 8001466:	f000 fb84 	bl	8001b72 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010800 	.word	0x40010800

08001474 <YELLOW_1>:

void YELLOW_1(){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2101      	movs	r1, #1
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <YELLOW_1+0x28>)
 800147e:	f000 fb78 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <YELLOW_1+0x28>)
 8001488:	f000 fb73 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2104      	movs	r1, #4
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <YELLOW_1+0x28>)
 8001492:	f000 fb6e 	bl	8001b72 <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40010800 	.word	0x40010800

080014a0 <RED_2>:

void RED_2(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2108      	movs	r1, #8
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <RED_2+0x28>)
 80014aa:	f000 fb62 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <RED_2+0x28>)
 80014b4:	f000 fb5d 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <RED_2+0x28>)
 80014be:	f000 fb58 	bl	8001b72 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010800 	.word	0x40010800

080014cc <GREEN_2>:

void GREEN_2(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2108      	movs	r1, #8
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <GREEN_2+0x28>)
 80014d6:	f000 fb4c 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2110      	movs	r1, #16
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <GREEN_2+0x28>)
 80014e0:	f000 fb47 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <GREEN_2+0x28>)
 80014ea:	f000 fb42 	bl	8001b72 <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40010800 	.word	0x40010800

080014f8 <YELLOW_2>:

void YELLOW_2(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2108      	movs	r1, #8
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <YELLOW_2+0x28>)
 8001502:	f000 fb36 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2110      	movs	r1, #16
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <YELLOW_2+0x28>)
 800150c:	f000 fb31 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2120      	movs	r1, #32
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <YELLOW_2+0x28>)
 8001516:	f000 fb2c 	bl	8001b72 <HAL_GPIO_WritePin>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40010800 	.word	0x40010800

08001524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001524:	f7ff ff74 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800152a:	490c      	ldr	r1, [pc, #48]	; (800155c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <LoopFillZerobss+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001540:	4c09      	ldr	r4, [pc, #36]	; (8001568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f001 fae1 	bl	8002b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001552:	f7ff fc45 	bl	8000de0 <main>
  bx lr
 8001556:	4770      	bx	lr
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001560:	08002bb0 	.word	0x08002bb0
  ldr r2, =_sbss
 8001564:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001568:	20000428 	.word	0x20000428

0800156c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_2_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_Init+0x28>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x28>)
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f923 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff feb8 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f93b 	bl	8001836 <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 f903 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000040 	.word	0x20000040
 80015f4:	20000048 	.word	0x20000048
 80015f8:	20000044 	.word	0x20000044

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x1c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x20>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x20>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000048 	.word	0x20000048
 800161c:	20000424 	.word	0x20000424

08001620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000424 	.word	0x20000424

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <__NVIC_EnableIRQ+0x34>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f7ff ff90 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff2d 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff42 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff35 	bl	8001698 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b08b      	sub	sp, #44	; 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	e148      	b.n	8001af6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001864:	2201      	movs	r2, #1
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8137 	bne.w	8001af0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4aa3      	ldr	r2, [pc, #652]	; (8001b14 <HAL_GPIO_Init+0x2c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d05e      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 800188c:	4aa1      	ldr	r2, [pc, #644]	; (8001b14 <HAL_GPIO_Init+0x2c4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d875      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 8001892:	4aa1      	ldr	r2, [pc, #644]	; (8001b18 <HAL_GPIO_Init+0x2c8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d058      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 8001898:	4a9f      	ldr	r2, [pc, #636]	; (8001b18 <HAL_GPIO_Init+0x2c8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d86f      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 800189e:	4a9f      	ldr	r2, [pc, #636]	; (8001b1c <HAL_GPIO_Init+0x2cc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d052      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018a4:	4a9d      	ldr	r2, [pc, #628]	; (8001b1c <HAL_GPIO_Init+0x2cc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d869      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018aa:	4a9d      	ldr	r2, [pc, #628]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04c      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018b0:	4a9b      	ldr	r2, [pc, #620]	; (8001b20 <HAL_GPIO_Init+0x2d0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d863      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018b6:	4a9b      	ldr	r2, [pc, #620]	; (8001b24 <HAL_GPIO_Init+0x2d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d046      	beq.n	800194a <HAL_GPIO_Init+0xfa>
 80018bc:	4a99      	ldr	r2, [pc, #612]	; (8001b24 <HAL_GPIO_Init+0x2d4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d85d      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d82a      	bhi.n	800191c <HAL_GPIO_Init+0xcc>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d859      	bhi.n	800197e <HAL_GPIO_Init+0x12e>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <HAL_GPIO_Init+0x80>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	0800194b 	.word	0x0800194b
 80018d4:	08001925 	.word	0x08001925
 80018d8:	08001937 	.word	0x08001937
 80018dc:	08001979 	.word	0x08001979
 80018e0:	0800197f 	.word	0x0800197f
 80018e4:	0800197f 	.word	0x0800197f
 80018e8:	0800197f 	.word	0x0800197f
 80018ec:	0800197f 	.word	0x0800197f
 80018f0:	0800197f 	.word	0x0800197f
 80018f4:	0800197f 	.word	0x0800197f
 80018f8:	0800197f 	.word	0x0800197f
 80018fc:	0800197f 	.word	0x0800197f
 8001900:	0800197f 	.word	0x0800197f
 8001904:	0800197f 	.word	0x0800197f
 8001908:	0800197f 	.word	0x0800197f
 800190c:	0800197f 	.word	0x0800197f
 8001910:	0800197f 	.word	0x0800197f
 8001914:	0800192d 	.word	0x0800192d
 8001918:	08001941 	.word	0x08001941
 800191c:	4a82      	ldr	r2, [pc, #520]	; (8001b28 <HAL_GPIO_Init+0x2d8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001922:	e02c      	b.n	800197e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e029      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	3304      	adds	r3, #4
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e024      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	3308      	adds	r3, #8
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e01f      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	330c      	adds	r3, #12
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e01a      	b.n	8001980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001952:	2304      	movs	r3, #4
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e013      	b.n	8001980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	611a      	str	r2, [r3, #16]
          break;
 800196a:	e009      	b.n	8001980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800196c:	2308      	movs	r3, #8
 800196e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	615a      	str	r2, [r3, #20]
          break;
 8001976:	e003      	b.n	8001980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x130>
          break;
 800197e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d801      	bhi.n	800198a <HAL_GPIO_Init+0x13a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	e001      	b.n	800198e <HAL_GPIO_Init+0x13e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3304      	adds	r3, #4
 800198e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d802      	bhi.n	800199c <HAL_GPIO_Init+0x14c>
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x152>
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3b08      	subs	r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	210f      	movs	r1, #15
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	401a      	ands	r2, r3
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8090 	beq.w	8001af0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d0:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_GPIO_Init+0x2dc>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x2e0>)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2e4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1e0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2ec>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1d8>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e004      	b.n	8001a32 <HAL_GPIO_Init+0x1e2>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x1e2>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_GPIO_Init+0x1e2>
 8001a30:	2300      	movs	r3, #0
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	f002 0203 	and.w	r2, r2, #3
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	4093      	lsls	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a42:	493b      	ldr	r1, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x2e0>)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4937      	ldr	r1, [pc, #220]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4933      	ldr	r1, [pc, #204]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	492d      	ldr	r1, [pc, #180]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4929      	ldr	r1, [pc, #164]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4923      	ldr	r1, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	491f      	ldr	r1, [pc, #124]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4919      	ldr	r1, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4915      	ldr	r1, [pc, #84]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3301      	adds	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f47f aeaf 	bne.w	8001864 <HAL_GPIO_Init+0x14>
  }
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	372c      	adds	r7, #44	; 0x2c
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10310000 	.word	0x10310000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	10210000 	.word	0x10210000
 8001b24:	10120000 	.word	0x10120000
 8001b28:	10110000 	.word	0x10110000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e26c      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4b8f      	ldr	r3, [pc, #572]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e246      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7f      	ldr	r2, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x98>
 8001c22:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b78      	ldr	r3, [pc, #480]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a77      	ldr	r2, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xbc>
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6a      	ldr	r2, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fcce 	bl	8001620 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcca 	bl	8001620 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1fa      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe4>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcba 	bl	8001620 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fcb6 	bl	8001620 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1e6      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x10c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1ba      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4939      	ldr	r1, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fc6f 	bl	8001620 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc6b 	bl	8001620 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e19b      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc4e 	bl	8001620 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fc4a 	bl	8001620 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e17a      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d019      	beq.n	8001dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fc2e 	bl	8001620 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc2a 	bl	8001620 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e15a      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 fa9a 	bl	8002320 <RCC_Delay>
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fc14 	bl	8001620 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc10 	bl	8001620 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d908      	bls.n	8001e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e140      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	42420000 	.word	0x42420000
 8001e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b9e      	ldr	r3, [pc, #632]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e9      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a6 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b97      	ldr	r3, [pc, #604]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b94      	ldr	r3, [pc, #592]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a93      	ldr	r2, [pc, #588]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b91      	ldr	r3, [pc, #580]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b8e      	ldr	r3, [pc, #568]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a8a      	ldr	r2, [pc, #552]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fbd1 	bl	8001620 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fbcd 	bl	8001620 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0fd      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a72      	ldr	r2, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x356>
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a6c      	ldr	r2, [pc, #432]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a63      	ldr	r2, [pc, #396]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb81 	bl	8001620 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb7d 	bl	8001620 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ab      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x37e>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb6b 	bl	8001620 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb67 	bl	8001620 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e095      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b48      	ldr	r3, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8081 	beq.w	800208e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d061      	beq.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d146      	bne.n	800202e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fb3b 	bl	8001620 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fb37 	bl	8001620 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e067      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	492d      	ldr	r1, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a19      	ldr	r1, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fb0b 	bl	8001620 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fb07 	bl	8001620 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e037      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x46a>
 800202c:	e02f      	b.n	800208e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_RCC_OscConfig+0x4fc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff faf4 	bl	8001620 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff faf0 	bl	8001620 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e020      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
 800205a:	e018      	b.n	800208e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e013      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060

080020a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d0      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4965      	ldr	r1, [pc, #404]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0b8      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002118:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	494d      	ldr	r1, [pc, #308]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e07f      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e073      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0203 	bic.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4936      	ldr	r1, [pc, #216]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7ff fa44 	bl	8001620 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7ff fa40 	bl	8001620 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e053      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 020c 	and.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1eb      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d210      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4922      	ldr	r1, [pc, #136]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e032      	b.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4916      	ldr	r1, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	490e      	ldr	r1, [pc, #56]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002232:	f000 f821 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1cc>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1d0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff f9a2 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	08002b84 	.word	0x08002b84
 8002270:	20000040 	.word	0x20000040
 8002274:	20000044 	.word	0x20000044

08002278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_RCC_GetSysClockFreq+0x94>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x30>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x36>
 80022a6:	e027      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022aa:	613b      	str	r3, [r7, #16]
      break;
 80022ac:	e027      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_GetSysClockFreq+0x94>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	fb02 f203 	mul.w	r2, r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e004      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	613b      	str	r3, [r7, #16]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fa:	613b      	str	r3, [r7, #16]
      break;
 80022fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fe:	693b      	ldr	r3, [r7, #16]
}
 8002300:	4618      	mov	r0, r3
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	007a1200 	.word	0x007a1200
 8002314:	08002b94 	.word	0x08002b94
 8002318:	08002ba4 	.word	0x08002ba4
 800231c:	003d0900 	.word	0x003d0900

08002320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <RCC_Delay+0x34>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <RCC_Delay+0x38>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800233c:	bf00      	nop
  }
  while (Delay --);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	60fa      	str	r2, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <RCC_Delay+0x1c>
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000040 	.word	0x20000040
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e041      	b.n	80023f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe ffee 	bl	8001364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fa56 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e035      	b.n	8002480 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_TIM_Base_Start_IT+0x90>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_TIM_Base_Start_IT+0x4e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d004      	beq.n	800244a <HAL_TIM_Base_Start_IT+0x4e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_TIM_Base_Start_IT+0x94>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b06      	cmp	r3, #6
 800245a:	d010      	beq.n	800247e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	e007      	b.n	800247e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400

08002494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d020      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0202 	mvn.w	r2, #2
 80024c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f998 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f98b 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f99a 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d020      	beq.n	8002544 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0204 	mvn.w	r2, #4
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f972 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f965 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f974 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d020      	beq.n	8002590 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0208 	mvn.w	r2, #8
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2204      	movs	r2, #4
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f94c 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f93f 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f94e 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d020      	beq.n	80025dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0210 	mvn.w	r2, #16
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2208      	movs	r2, #8
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f926 	bl	8002814 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f919 	bl	8002802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f928 	bl	8002826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0201 	mvn.w	r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fd12 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa6f 	bl	8002b02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8f8 	bl	8002838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0220 	mvn.w	r2, #32
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa42 	bl	8002af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x1c>
 800268c:	2302      	movs	r3, #2
 800268e:	e0b4      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x186>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c8:	d03e      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0xd4>
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ce:	f200 8087 	bhi.w	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	f000 8086 	beq.w	80027e6 <HAL_TIM_ConfigClockSource+0x172>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d87f      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d01a      	beq.n	800271a <HAL_TIM_ConfigClockSource+0xa6>
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d87b      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d050      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x11a>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d877      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b50      	cmp	r3, #80	; 0x50
 80026f2:	d03c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xfa>
 80026f4:	2b50      	cmp	r3, #80	; 0x50
 80026f6:	d873      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d058      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x13a>
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d86f      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d064      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002704:	2b30      	cmp	r3, #48	; 0x30
 8002706:	d86b      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d060      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d867      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b10      	cmp	r3, #16
 8002716:	d05a      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	e062      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f000 f96a 	bl	8002a02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800273c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	609a      	str	r2, [r3, #8]
      break;
 8002746:	e04f      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f000 f953 	bl	8002a02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276a:	609a      	str	r2, [r3, #8]
      break;
 800276c:	e03c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 f8ca 	bl	8002914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2150      	movs	r1, #80	; 0x50
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f921 	bl	80029ce <TIM_ITRx_SetConfig>
      break;
 800278c:	e02c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f8e8 	bl	8002970 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2160      	movs	r1, #96	; 0x60
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f911 	bl	80029ce <TIM_ITRx_SetConfig>
      break;
 80027ac:	e01c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8aa 	bl	8002914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f901 	bl	80029ce <TIM_ITRx_SetConfig>
      break;
 80027cc:	e00c      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f000 f8f8 	bl	80029ce <TIM_ITRx_SetConfig>
      break;
 80027de:	e003      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e000      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a2b      	ldr	r2, [pc, #172]	; (800290c <TIM_Base_SetConfig+0xc0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x28>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x28>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_Base_SetConfig+0xc4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a20      	ldr	r2, [pc, #128]	; (800290c <TIM_Base_SetConfig+0xc0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0x52>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0x52>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <TIM_Base_SetConfig+0xc4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d108      	bne.n	80028b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <TIM_Base_SetConfig+0xc0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f023 0201 	bic.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
  }
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400

08002914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 0201 	bic.w	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 030a 	bic.w	r3, r3, #10
 8002950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f023 0210 	bic.w	r2, r3, #16
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800299a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	031b      	lsls	r3, r3, #12
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	621a      	str	r2, [r3, #32]
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f043 0307 	orr.w	r3, r3, #7
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e041      	b.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10c      	bne.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400

08002af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <__libc_init_array>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	2600      	movs	r6, #0
 8002b18:	4d0c      	ldr	r5, [pc, #48]	; (8002b4c <__libc_init_array+0x38>)
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	; (8002b50 <__libc_init_array+0x3c>)
 8002b1c:	1b64      	subs	r4, r4, r5
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	42a6      	cmp	r6, r4
 8002b22:	d109      	bne.n	8002b38 <__libc_init_array+0x24>
 8002b24:	f000 f822 	bl	8002b6c <_init>
 8002b28:	2600      	movs	r6, #0
 8002b2a:	4d0a      	ldr	r5, [pc, #40]	; (8002b54 <__libc_init_array+0x40>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	; (8002b58 <__libc_init_array+0x44>)
 8002b2e:	1b64      	subs	r4, r4, r5
 8002b30:	10a4      	asrs	r4, r4, #2
 8002b32:	42a6      	cmp	r6, r4
 8002b34:	d105      	bne.n	8002b42 <__libc_init_array+0x2e>
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3c:	4798      	blx	r3
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7ee      	b.n	8002b20 <__libc_init_array+0xc>
 8002b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b46:	4798      	blx	r3
 8002b48:	3601      	adds	r6, #1
 8002b4a:	e7f2      	b.n	8002b32 <__libc_init_array+0x1e>
 8002b4c:	08002ba8 	.word	0x08002ba8
 8002b50:	08002ba8 	.word	0x08002ba8
 8002b54:	08002ba8 	.word	0x08002ba8
 8002b58:	08002bac 	.word	0x08002bac

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
